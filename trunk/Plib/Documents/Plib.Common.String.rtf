{\rtf1\ansi\ansicpg1252\cocoartf1038\cocoasubrtf350
{\fonttbl\f0\fmodern\fcharset0 CourierNewPS-BoldMT;\f1\fmodern\fcharset0 CourierNewPSMT;\f2\fmodern\fcharset0 CourierNewPS-ItalicMT;
\f3\fmodern\fcharset0 CourierNewPS-BoldItalicMT;}
{\colortbl;\red255\green255\blue255;}
\paperw11900\paperh16840\margl1440\margr1440\vieww14880\viewh11620\viewkind0
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\ql\qnatural\pardirnatural

\f0\b\fs28 \cf0 \
namespace Plib::Common\
\

\f1\b0 Class 
\f0\b _StringBasic
\f1\b0 \
syntax: \
	template< typename _Basic_C > class 
\f0\b _StringBasic
\f1\b0 ;\
template parameters:\
	class 
\f0\b _Basic_Char
\f1\b0 ;	// for char\
	class 
\f0\b _Basic_WChar
\f1\b0 ;	// fow wchar_t\
\
constant:\
	
\f0\b NoPos
\f1\b0 				// (Uint32)-1, means 'Invalidate Position'.\
	
\f0\b Captial
\f1\b0 				// 0x40U, the minimum size when alloc a new block.\
\
member:\
	
\f0\b _BufferSize
\f1\b0 			// The size of _Buffer.\
	
\f0\b _Length
\f1\b0 				// The string length, or the size has been used.\
	
\f0\b _Buffer
\f1\b0 				// A CharType pointer points to the beginning of data.\
\
methods(protected):\
	
\f0\b _CheckAndRealloc( __in _AppnedSize )
\f1\b0 \
	// Check if the 
\f2\i _Buffer
\f1\i0  contains enough space to append data of 
\f2\i _AppendSize
\f1\i0 .\
	// If not has enough space, call 
\f3\i\b realloc
\f1\i0\b0  to get more memory.\
\
methods(public):\

\f2\i 	[Class Methods]\

\f0\i0\b 	Parse( __in _Format, __in ... )\

\f1\b0 	// Create a new string and format it with the input 
\f2\i _Format
\f1\i0 \
\

\f2\i 	[Instance Methods]\

\f1\i0 	[Construction]\
	
\f0\b _StringBasic( )
\f1\b0 \
	// Default constructure, alloc the 
\f2\i _Buffer
\f1\i0  with 
\f0\b Captial
\f1\b0  bytes.\
\
	
\f0\b _StringBasic( __in _C )
\f1\b0 \
	// Initial the 
\f2\i _Buffer
\f1\i0  with the first element be 
\f2\i _C
\f1\i0 .\
\
	
\f0\b _StringBasic( __in _Len, __in _C )
\f1\b0 \
	// Initial the 
\f2\i _Buffer
\f1\i0  with the first 
\f2\i _Len
\f1\i0  elements be 
\f2\i _C
\f1\i0 .\
\
	
\f0\b _StringBasic( __in _Data, __in _DLength )
\f1\b0 \
	// The 
\f2\i _Data
\f1\i0  is a constant CharType pointer points to a string.\
	// 
\f2\i _DLength
\f1\i0  is the length of 
\f2\i _Data
\f1\i0 .\
	// The construction alloc the 
\f2\i _Buffer
\f1\i0  according to the 
\f2\i _DLength
\f1\i0  and \
	// copy _Data to 
\f2\i _Buffer
\f1\i0 .\
\
	
\f0\b _StringBasic( __in _Data )
\f1\b0 \
	// The 
\f2\i _Data
\f1\i0  must be a terminating null-charachter string pointer.\
	// The construction will invoke 
\f3\i\b _Basic_C::StringLength
\f1\i0\b0  to calculate the \
	// length of 
\f2\i _Data
\f1\i0 , then initial the 
\f2\i _Buffer
\f1\i0  the same as \
	// the previous construction does.\
\

\f0\b 	_StringBasic( __in _String )\

\f1\b0 	// Copy Construction.\
	// Copy from 
\f2\i _String
\f1\i0 . These two 
\f0\b _StringBasic
\f1\b0  objects should be exactly the same.\
\
	[Destruction]\

\f0\b 	~_StringBasic( )\

\f1\b0 	// Release the 
\f2\i _Buffer
\f1\i0 , free the memory.\
\
	[Basic Methods]\
	
\f0\b Append( __in _Data, __in _DLength )
\f1\b0 \
	// Append string 
\f2\i _Data
\f1\i0  to the end of current string.\
	// 
\f2\i _DLength
\f1\i0  is the length of 
\f2\i _Data
\f1\i0 .\
	\
	
\f0\b Append( __in _Data )\

\f1\b0 	// Append string 
\f2\i _Data
\f1\i0  to the end of current string.\
	// 
\f2\i _Data
\f1\i0  must be a terminating null-charachter.\
\
	
\f0\b Append( __in SB )
\f1\b0 \
	// Append the 
\f0\b _StringBasic
\f1\b0  object 
\f2\i SB
\f1\i0  to the end of current string.\
\
	
\f0\b Insert( __in _Data, __in _DLength, __in _Pos )
\f1\b0 \
	// Insert the string 
\f2\i _Data
\f1\i0  at the 
\f2\i _Pos
\f1\i0  of current string.\
	// 
\f2\i _Pos
\f1\i0  defaultly be 
\f0\b NoPos
\f1\b0 , means at the end of the string.\
	// If 
\f2\i _Pos
\f1\i0  is bigger than 
\f2\i _Length
\f1\i0  of current string, return 
\f0\b false
\f1\b0 .\
\
	
\f0\b Insert( __in _Data, __in _Pos )
\f1\b0 \
	// Same as the previous 
\f3\i\b Insert
\f1\i0\b0 , beside that 
\f2\i _Data
\f1\i0  must be a terminating\
	// null-charachter.\
\
	
\f0\b Remove( __in _First, __in _Size )
\f1\b0 \
	// Remove 
\f2\i _Size
\f1\i0  charachters start from 
\f2\i _First
\f1\i0  in the string.\
	// if 
\f2\i _Size
\f1\i0  of 
\f2\i _First
\f1\i0  is bigger than current 
\f2\i _Length
\f1\i0  or 
\f2\i (_First + _Size)
\f1\i0  is\
	// out of band, return 
\f0\b false
\f1\b0 . \
\

\f0\b 	Remove( __in First )\

\f1\b0 	// Remove all charachters start from 
\f2\i _First
\f1\i0  in the string.\
\
	
\f0\b SubString( __in _OffSet, __in _DLength )\

\f1\b0 	// Return the substring start from 
\f2\i _OffSet
\f1\i0  has a length of 
\f2\i _DLength
\f1\i0 .\
	// 
\f2\i _DLength
\f1\i0  default is 
\f0\b NoPos
\f1\b0 , means to the end of the string.\
\
	
\f0\b const C_Str( ) const\
	
\f1\b0 // Return the 
\f2\i _Buffer
\f1\i0 \
\

\f0\b 	Size() const\

\f1\b0 	// Return the 
\f2\i _Length
\f1\i0 \
\

\f0\b 	Clear()\

\f1\b0 	// Reset current string to an empty string.\
\
	[Operators]\
	
\f0\b operator [] ( __in _Idx )\

\f1\b0 	// Return the 
\f2\i _Idx
\f1\i0  th charachter in the 
\f2\i _Buffer
\f1\i0 .\
	// 
\f2\i _Idx
\f1\i0  must be smaller than 
\f2\i _Length
\f1\i0 .\
\
	
\f0\b const operator [] ( __in _Idx ) const\

\f1\b0 	// Constant version of 
\f3\i\b operator []
\f1\i0\b0 \
\
	
\f0\b operator += ( __in const _Data )\

\f1\b0 	// Same as 
\f3\i\b Append( __in _Data )
\f1\i0\b0 \
\
	
\f0\b operator += ( __in const SB )\

\f1\b0 	// Same as 
\f3\i\b Append( __in SB )
\f1\i0\b0 \
\
	
\f0\b operator + ( __in _Data )
\f1\b0 \
	// Create a new clone of current string, append 
\f2\i _Data
\f1\i0  to the end of the clone string.\
	// Return the clone string.\
\
	
\f0\b operator + ( __in SB )
\f1\b0 \
	// 
\f2\i SB
\f1\i0  is a 
\f0\b _StringBasic
\f1\b0  object. Same as 
\f3\i\b operator + ( __in _Data )
\f1\i0\b0 \
\
	
\f0\b operator = ( __in _Data )\

\f1\b0 	// Copy 
\f2\i _Data
\f1\i0  to current string. Overwrite 
\f2\i _Buffer
\f1\i0 .\
\
	
\f0\b operator = ( __in SB )\

\f1\b0 	// 
\f2\i SB
\f1\i0  is a 
\f0\b _StringBasic
\f1\b0  object.\
	\
	
\f0\b operator == ( __in _Data ) const
\f1\b0 \
	// Check if 
\f2\i _Data
\f1\i0  is same as current string.\
\

\f0\b 	operator == ( __in SB ) const
\f1\b0 \
	// 
\f2\i SB
\f1\i0  is a 
\f0\b _StringBaisc
\f1\b0  object.\
\
	
\f0\b operator != ( __in _Data ) const
\f1\b0 \
	// Check if 
\f2\i _Data
\f1\i0  is not the same as current string.\
	\
	
\f0\b operator != ( __in SB ) const\

\f1\b0 	// 
\f2\i SB
\f1\i0  is a 
\f0\b _StringBasic
\f1\b0  object.\
\

\f0\b 	operator < ( __in _Data ) const\

\f1\b0 	// Compare two string, check if current is smaller than 
\f2\i _Data
\f1\i0 .\
\

\f0\b 	operator < ( __in _SB ) const\

\f1\b0 	// Same as previous.\
\

\f0\b 	const CharType * () const\

\f1\b0 	// Cast operator, return the internal 
\f2\i _Buffer
\f1\i0 .\
\
	[Logic Methods]\

\f0\b 	Format( __in _Format, __in ... )\

\f1\b0 	// Format current string use the input 
\f2\i _Format
\f1\i0 .\
\
	
\f0\b ToUpper( )
\f1\b0 \
	// Change all charachters in the current string to upper case.\
\

\f0\b 	ToLower( )
\f1\b0 \
	// Change all charachters in the current string to lower case.\
\

\f0\b 	Trim( )\

\f1\b0 	// Omit the space charachters at the begin and end of current string.\
\

\f0\b 	StartWith( __in _Data ) const\

\f1\b0 	// Check if current string is start with 
\f2\i _Data
\f1\i0 .\
\

\f0\b 	StartWith( __in SB ) const\

\f1\b0 	// same\
\

\f0\b 	EndWith( __in _Data ) const\

\f1\b0 	// Check if current string is end with 
\f2\i _Data
\f1\i0 .\
	\

\f0\b 	EndWith( __in SB ) const\

\f1\b0 	// same\
\

\f0\b 	Find( __in _C, __in _OffSet ) const\

\f1\b0 	// Find 
\f2\i _C
\f1\i0  in current string after 
\f2\i _OffSet
\f1\i0 .\
	// Default 
\f2\i _OffSet
\f1\i0  is 0, means the beginning of current string.\
\

\f0\b 	Find( __in _Data, __in _DLength, __in _OffSet ) const\

\f1\b0 	// Find 
\f2\i _Data
\f1\i0  in current string after 
\f2\i _OffSet
\f1\i0 .\
	// If 
\f2\i _OffSet
\f1\i0  is bigger than 
\f2\i _Length
\f1\i0  or 
\f2\i (_Length - _OffSet)
\f1\i0  is smaller than 
\f2\i _DLength
\f1\i0 , \
	// directly return 
\f0\b NoPos
\f1\b0 .\
\

\f0\b 	Find( __in _Data, __in _OffSet ) const\

\f1\b0 	// Same\
\

\f0\b 	Find( __in SB, __in _OffSet ) const\

\f1\b0 	// Same\
\

\f0\b 	FindLast( __in _C, __in _OffSet ) const\

\f1\b0 	// Find the last 
\f2\i _C
\f1\i0  in the string before 
\f2\i _OffSet
\f1\i0 .\
	// Default 
\f2\i _OffSet
\f1\i0  the 
\f0\b NoPos
\f1\b0 , means the end of the string.\
\

\f0\b 	IntValue() const\

\f1\b0 	// Change the string to 32-bit integer.\
\

\f0\b 	UintValue() const\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\ql\qnatural\pardirnatural

\f1\b0 \cf0 	// Change the string to 32-bit unsigned integer.\
\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\ql\qnatural\pardirnatural

\f0\b \cf0 	Int64Value() const\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\ql\qnatural\pardirnatural

\f1\b0 \cf0 	// Change the string to 64-bit integer.\
\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\ql\qnatural\pardirnatural

\f0\b \cf0 	Uint64Value() const\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\ql\qnatural\pardirnatural

\f1\b0 \cf0 	// Change the string to 64-bit unsigned integer.\
\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\ql\qnatural\pardirnatural

\f0\b \cf0 	DoubleValue() const\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\ql\qnatural\pardirnatural

\f1\b0 \cf0 	// Change the string to double.\
\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\ql\qnatural\pardirnatural

\f0\b \cf0 	FloatValue() const\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\ql\qnatural\pardirnatural

\f1\b0 \cf0 	// Change the string to float.\
\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\ql\qnatural\pardirnatural

\f0\b \cf0 	BoolValue() const\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\ql\qnatural\pardirnatural

\f1\b0 \cf0 	// Change the string to bool.\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\ql\qnatural\pardirnatural
\cf0 \
}